import ch.tutteli.atrium.api.infix.en_GB.*
import ch.tutteli.atrium.api.verbs.expect
import kotlin.test.Test

class CharSequenceToContainCreatorSamplesInfix {

    @Test
    fun value() {
        expect("ABC") toContain exactly(1).value("A")
        expect("ABBBC") toContain atLeast(2).value("B")
        fails {
            expect("AAAAAA") toContain atMost(3).value("A")
        }
    }

    @Test
    fun valueIgnoringCase() {
        expect("ABC") toContain ignoringCase value("a")
        expect("AbbbC")toContain ignoringCase value("B")

        fails {
            expect("AAAAAA") toContain ignoringCase value("B")
        }
    }

    @Test
    fun values() {
        expect("ABC") toContain exactly(1).values("A", "B", "C")
        expect("AAABC") toContain atMost(3).values("A", "B", "C")
        expect("ABBBCD") toContain atLeast(1).values("A", "B", "C", "D")

        fails {
            expect("AAAAAABBBB") toContain atMost(3).values("A", "B")
        }
        fails {
            expect("AAABBBB") toContain exactly(3).values("A", "B")
        }
        fails {
            expect("AAAAAABBBB") toContain atLeast(3).values("A", "B", "C")
        }
    }

    @Test
    fun valuesIgnoringCase() {
        expect("AbC")toContain ignoringCase values("A", "B", "c")

        fails {
            expect("aabaabbb") toContain ignoringCase.values("A", "B", "C")
        }
    }

    @Test
    fun matchFor() {
        expect("ABC") toContain exactly(1).matchFor(Regex("A"), Regex("B"), Regex("C"))
        expect("AAABC") toContain atMost(3).matchFor(Regex("A"), Regex("B"), Regex("C"))
        expect("ABBBCD") toContain atLeast(1).matchFor(Regex("A"), Regex("B"), Regex("C"), Regex("D"))

        fails {
            expect("AAAAAABBBB") toContain atMost(3).matchFor(Regex("A"), Regex("B"))
        }
        fails {
            expect("AAABBBB") toContain exactly(3).matchFor(Regex("A"), Regex("B"))
        }
        fails {
            expect("AAAAAABBBB") toContain atLeast(3).matchFor(Regex("A"), Regex("B"), Regex("C"))
        }
    }

    @Test
    fun elementsOf() {
        expect("ABC") toContain exactly(1).elementsOf(listOf("A", "B", "C"))
        expect("AAABC") toContain atMost(3).elementsOf(listOf("A", "B", "C"))
        expect("ABBBCD") toContain atLeast(1).elementsOf(listOf("A", "B", "C", "D"))

        fails {
            expect("AAAAAABBBB") toContain atMost(3).elementsOf(listOf("A", "B"))
        }
        fails {
            expect("AAABBBB") toContain exactly(3).elementsOf(listOf("A", "B"))
        }
        fails {
            expect("AAAAAABBBB") toContain atLeast(3).elementsOf(listOf("A", "B", "C"))
        }
    }

    @Test
    fun elementsOfIgnoreCase() {
        expect("AbC") toContain ignoringCase.elementsOf(listOf("A", "B", "c"))

        fails {
            expect("aabaabbb") toContain ignoringCase.elementsOf(listOf("A", "B", "C"))
        }
    }
}